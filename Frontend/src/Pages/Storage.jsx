export default function StorageDoc() {
  return (
    <main className="max-w-4xl mx-auto px-6 py-12 text-gray-800">
      {/* Title */}
      <h1 className="text-3xl sm:text-4xl font-bold mb-6">Cloudinary</h1>

      {/* Intro */}
      <p className="text-gray-700 leading-relaxed mb-4">
        The image storage service used in <span className="font-semibold">StudyStudio</span> is{" "}
        <a href="#" className="text-green-700 underline hover:text-green-800">Cloudinary</a>.
        Cloudinary is a cloud-based image and video management service. It enables users to upload,
        store, manage, manipulate, and deliver images and videos for websites and apps. You can use
        their free-tier to host the images and videos for your application.
      </p>

      <Note tone="warning" className="mb-8">
        If you’re worried about the free-tier not being enough or the need to scale in the future,
        we have provided an approximate accurate cost estimate calculator for our SaaS product in the
        documentation as well. Visit <a href="#" className="underline">Cost Calculator</a> to learn
        about it in depth.
      </Note>

      <p className="text-gray-700 leading-relaxed mb-10">
        Open your <Code>.env.local</Code> file and ensure following the given steps:
      </p>

      {/* Step 1 */}
      <Step number={1} title="Setup Cloudinary Account">
        Create an account on{" "}
        <a href="#" className="text-green-700 underline hover:text-green-800">Cloudinary</a> and get
        your <Code>Cloud Name</Code>. You will see this value in your Cloudinary dashboard. Copy it
        and save it for later use.
      </Step>

      {/* Step 2 */}
      <Step number={2} title="Creating a Cloudinary Upload Preset">
        From the sidebar, navigate to the <Code>Settings</Code> tab and then click on the{" "}
        <Code>Upload Presets</Code> tab. Create a new upload preset by clicking on{" "}
        <Code>Add Upload Preset</Code> button. Make sure your <Code>Signing mode</Code> is set to{" "}
        <Code>Unsigned</Code>. You can keep the rest of the values to be at default and the{" "}
        <Code>Upload Preset Name</Code> field empty. Click on <Code>Save</Code>. Once created, you
        can copy the <Code>Upload Preset Name</Code> that was generated by the system and save it
        for later use.
        <figure className="mt-6">
          <img
            src="/images/cloudinary-preset-example.png"
            alt="Cloudinary upload preset example"
            className="w-full rounded-xl shadow-lg"
          />
          <figcaption className="text-sm text-gray-500 text-center mt-2">
            Example for the creation of upload preset on a Cloudinary dashboard.
          </figcaption>
        </figure>
      </Step>

      {/* Step 3 */}
      <Step
        number={3}
        title="Replacing Cloudinary Cloud Name and Cloudinary Upload Preset"
      >
        Replace <Code>your-cloudinary-cloud-name</Code> with your original{" "}
        <span className="font-medium">Cloudinary Cloud Name</span>, and{" "}
        <Code>your-cloudinary-upload-preset</Code> with your original{" "}
        <span className="font-medium">Cloudinary Upload Preset</span> values that you copied earlier.
        <pre className="bg-green-50 border border-green-100 rounded-lg p-4 text-sm overflow-x-auto mt-4">
{`# env.local
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=your-cloudinary-cloud-name
NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET=your-cloudinary-upload-preset`}
        </pre>
      </Step>

      <p className="text-gray-700 leading-relaxed mt-8">
        This is how you can set up Cloudinary for your StudyStudio application.
      </p>

      {/* Meta + Prev/Next */}
      <div className="text-right text-xs text-gray-500 mt-10">
        Last updated on November 8, 2024
      </div>
      <nav className="flex items-center justify-between mt-8 pt-6 border-t text-green-700 text-sm">
        <a href="#" className="hover:underline">‹ Database ORM</a>
        <a href="#" className="hover:underline">Database ›</a>
      </nav>
    </main>
  );
}

/* ---------- Small UI helpers ---------- */

function Step({ number, title, children }) {
  return (
    <section className="relative pl-12 sm:pl-14 mb-10">
      <div className="absolute left-0 top-1.5 w-7 h-7 sm:w-8 sm:h-8 rounded-full bg-gray-100 border border-gray-200 flex items-center justify-center text-sm font-semibold text-gray-700">
        {number}
      </div>
      <h2 className="text-xl sm:text-2xl font-bold mb-3">{title}</h2>
      <div className="text-gray-700 leading-relaxed">{children}</div>
    </section>
  );
}

function Code({ children }) {
  return (
    <code className="bg-gray-100 rounded px-1 py-0.5 text-sm">{children}</code>
  );
}

/* Note component with tone variants (warning/info) */
function Note({ children, tone = "info", className = "" }) {
  const tones = {
    info: "bg-blue-50 border-blue-100 text-blue-900",
    warning: "bg-amber-50 border-amber-100 text-amber-900",
  };
  return (
    <div className={`rounded-md px-4 py-3 text-sm border ${tones[tone]} ${className}`}>
      {children}
    </div>
  );
}
